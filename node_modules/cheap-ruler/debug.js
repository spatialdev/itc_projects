'use strict';

var createRuler = require('./');
var turf = require('turf');
var vincenty = require('node-vincenty');

process.stdout.write('| lat | ');

for (var lat = 0; lat <= 80; lat += 10) {
    process.stdout.write(lat + '&deg; | ');
}

process.stdout.write('\n| --- | ');
for (var lat = 0; lat <= 80; lat += 10) process.stdout.write(' --- |');
process.stdout.write('\n');

var distances = [1, 100, 500, 1000, 2000];

for (var i = 0; i < distances.length; i++) {
    var dist = distances[i];
    process.stdout.write('| ' + dist + 'mi | ');

    for (var lat = 0; lat <= 80; lat += 10) {
        var ruler = createRuler(lat, 'miles');

        var p1 = ruler.destination([0, lat], dist / 2, 45);
        var p2 = ruler.destination([0, lat], dist / 2, 45 - 180);
        var d = ruler.distance(p1, p2);
        // var d = turf.distance(turf.point(p1), turf.point(p2), 'miles');
        // var d = fccDist(p1, p2, lat);
        var d2 = createRuler.units.miles * vincenty.distVincenty(p1[1], p1[0], p2[1], p2[0]).distance / 1000;
        var err = Math.abs((d - d2) / d2);
        var errStr = (Math.round(100 * 1e2 * err) / 1e2) + '%';

        process.stdout.write(errStr + ' | ');

        // console.log('distance: %dkm, latitude: %d, error: %d%', dist, lat, errStr);
    }
    process.stdout.write('\n');
}


function fccDist(a, b, lat) {
    var f = lat * Math.PI / 180;
    var k1 = 111.13209 - 0.56605 * Math.cos(2 * f) + 0.0012 * Math.cos(4 * f);
    var k2 = 111.41513 * Math.cos(f) - 0.09455 * Math.cos(3 * f) + 0.00012 * Math.cos(5 * f);
    var dy = k1 * (a[1] - b[1]);
    var dx = k2 * (a[0] - b[0]);
    return Math.sqrt(dx * dx + dy * dy);
}
